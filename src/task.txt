#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <MQTT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include "HTML.h"
#include <string.h>
#include <esp_task_wdt.h> 

// Pin Definitions
#define SOIL_PIN        36
#define LED_RED         5
#define LED_YELLOW      16
#define LED_GREEN       17
#define SIRENE_PIN      18
#define I2C_SDA         21
#define I2C_SCL         22

// MQTT Configuration
const char* MQTT_BROKER = "privateghofinda.cloud.shiftr.io";
const char* MQTT_USER = "privateghofinda";
const char* MQTT_PASS = "Jqi8J4DAALtisiMk";
String MQTT_TOPIC_PREFIX = "3013042/longsor";

// WiFi AP Configuration
const char* AP_SSID = "ITSNU Pekalongan";
const char* AP_PASS = "12345678";

// Global Objects
LiquidCrystal_I2C lcd(0x27, 16, 2);
Adafruit_MPU6050 mpu;
AsyncWebServer server(80);
WiFiClient espClient;
MQTTClient mqttClient;

// Shared Variables with Mutex Protection
volatile int soilMoisture = 0;
volatile int tiltAngle = 0;
volatile char alertLevel[8] = "AMAN";  // Changed to char array for volatile compatibility
SemaphoreHandle_t xMutex;
SemaphoreHandle_t mqttMutex;
SemaphoreHandle_t stringMutex;

// Core Task Handles
TaskHandle_t Core0Task;

void setupPins() {
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(SIRENE_PIN, OUTPUT);
  digitalWrite(SIRENE_PIN, LOW);
}

void initWiFiAP() {
  WiFi.softAP(AP_SSID, AP_PASS);
  Serial.print("AP IP Address: ");
  Serial.println(WiFi.softAPIP());
}

void mqttCallback(String &topic, String &payload) {
  Serial.println("Message received: " + topic + " - " + payload);
  
  if (topic == "nusabot/dapur/lampu") {
    digitalWrite(LED_RED, payload == "true" ? HIGH : LOW);
  }
}

void connectToMQTT() {
  mqttClient.begin(MQTT_BROKER, espClient);
  mqttClient.onMessage(mqttCallback);

  Serial.print("Connecting to MQTT Broker...");
  while (!mqttClient.connect("ESP32Client", MQTT_USER, MQTT_PASS)) {
    Serial.print(".");
    delay(1000);
  }
  
  Serial.println("\nConnected to MQTT!");
  mqttClient.subscribe("nusabot/#");
}

void connectToWiFi(const String& ssid, const String& pass) {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid.c_str(), pass.c_str());

  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("\nConnected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
  
  connectToMQTT();
}

void initWebServer() {
  // Handler for root path
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  // Handler for form submission
  server.on("/action_page", HTTP_POST, [](AsyncWebServerRequest *request){
    String newSSID = request->arg("ssidNew");
    String newPass = request->arg("passNew");
    
    request->send_P(200, "text/html", sukses_html);
    
    // Async-safe delay
    vTaskDelay(pdMS_TO_TICKS(2000));
    
    // Switch to STA mode
    WiFi.softAPdisconnect(true);
    connectToWiFi(newSSID, newPass);
  });

  server.begin();
}

// Core 0 Task: Sensor Reading and Alert System
void Core0TaskCode(void *pvParameters) {
  // Daftarkan task ke WDT
  if(esp_task_wdt_add(NULL) != ESP_OK) {
    Serial.println("Gagal daftarkan Core0 ke WDT!");
  }

  bool sireneState = false;
  unsigned long sirenePreviousMillis = 0;
  
  for(;;) {
    esp_task_wdt_reset();  // Reset WDT
    // Read soil moisture
    int rawValue = analogRead(SOIL_PIN);
    int moisture = map(rawValue, 1024, 454, 0, 100);

    // Read MPU6050
    sensors_event_t accel;
    mpu.getAccelerometerSensor()->getEvent(&accel);
    float x = accel.acceleration.x;
    float y = accel.acceleration.y;
    float z = accel.acceleration.z;
    int angle = (atan2(sqrt(x*x + y*y), z) * 180.0) / PI;

    // Update shared variables with mutex
    if(xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE) {
      soilMoisture = moisture;
      tiltAngle = angle;
      xSemaphoreGive(xMutex);
    }

    // Update alert system
    const char* newAlertLevel;
    if (moisture >= 80 || angle > 30) {
      newAlertLevel = "BAHAYA";
      digitalWrite(LED_RED, HIGH);
      digitalWrite(LED_YELLOW, LOW);
      digitalWrite(LED_GREEN, LOW);
      
      // Blink sirene
      unsigned long currentMillis = millis();
      if (currentMillis - sirenePreviousMillis >= 1000) {
        sireneState = !sireneState;
        digitalWrite(SIRENE_PIN, sireneState);
        sirenePreviousMillis = currentMillis;
      }
    }
    else if ((moisture >= 50 && moisture < 80) || (angle > 15 && angle <= 30)) {
      newAlertLevel = "WASPADA";
      digitalWrite(LED_YELLOW, HIGH);
      digitalWrite(LED_RED, LOW);
      digitalWrite(LED_GREEN, LOW);
      digitalWrite(SIRENE_PIN, LOW);
    }
    else {
      newAlertLevel = "AMAN";
      digitalWrite(LED_GREEN, HIGH);
      digitalWrite(LED_RED, LOW);
      digitalWrite(LED_YELLOW, LOW);
      digitalWrite(SIRENE_PIN, LOW);
    }

    // Update alert level with mutex
    if(xSemaphoreTake(stringMutex, portMAX_DELAY) == pdTRUE) {
      strncpy((char*)alertLevel, newAlertLevel, sizeof(alertLevel)-1);
      alertLevel[sizeof(alertLevel)-1] = '\0';
      xSemaphoreGive(stringMutex);
    }
    
    vTaskDelay(pdMS_TO_TICKS(100));
  }
}

// Core 1 Task: LCD Update and Data Publishing
void Core1TaskCode(void *pvParameters) {
    // Daftarkan task ke WDT
  if(esp_task_wdt_add(NULL) != ESP_OK) {
    Serial.println("Gagal daftarkan Core1 ke WDT!");
  }

  for(;;) {
    esp_task_wdt_reset();  // Reset WDT

    int moisture, angle;
    char level[8];
    
    // Get shared values with mutex
    if(xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE) {
      moisture = soilMoisture;
      angle = tiltAngle;
      xSemaphoreGive(xMutex);
    }

    // Get alert level with mutex
    if(xSemaphoreTake(stringMutex, portMAX_DELAY) == pdTRUE) {
      strncpy(level, (const char*)alertLevel, sizeof(level));
      xSemaphoreGive(stringMutex);
    }

    // Update LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Status: ");
    lcd.print(level);
    
    lcd.setCursor(0, 1);
    lcd.print("Tanah:");
    lcd.print(moisture);
    lcd.print("% ");
    
    lcd.setCursor(10, 1);
    lcd.print(angle);
    lcd.print((char)223);

    // Publish data with MQTT mutex
    if(xSemaphoreTake(mqttMutex, portMAX_DELAY) == pdTRUE) {
      mqttClient.publish(MQTT_TOPIC_PREFIX + "/soil", String(moisture));
      mqttClient.publish(MQTT_TOPIC_PREFIX + "/mpu", String(angle));
      mqttClient.publish(MQTT_TOPIC_PREFIX + "/level", level);
      xSemaphoreGive(mqttMutex);
    }
    
    vTaskDelay(pdMS_TO_TICKS(2000));
  }
}

void setup() {
  Serial.begin(115200);

  // Inisialisasi WDT dengan timeout 10 detik
  if(esp_task_wdt_init(10, true) != ESP_OK) {
    Serial.println("Gagal inisialisasi WDT!");
    while(1);
  }

  Wire.begin(I2C_SDA, I2C_SCL);
  
  // Create mutexes
  xMutex = xSemaphoreCreateMutex();
  mqttMutex = xSemaphoreCreateMutex();
  stringMutex = xSemaphoreCreateMutex();

  setupPins();
  initWiFiAP();
  initWebServer();

  if (!mpu.begin()) {
    Serial.println("Failed to initialize MPU6050!");
    while (1);
  }

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.print("Sistem Monitoring");
  lcd.setCursor(0, 1);
  lcd.print(" Longsor Aktif ");
  delay(2000);

  // Create tasks
  xTaskCreatePinnedToCore(
    Core0TaskCode,   // Task function
    "Core0Task",     // Task name
    10000,           // Stack size
    NULL,            // Parameters
    1,               // Priority
    &Core0Task,      // Task handle
    0                // Core 0
  );

  xTaskCreatePinnedToCore(
    Core1TaskCode,   // Task function
    "Core1Task",     // Task name
    10000,           // Stack size
    NULL,            // Parameters
    1,               // Priority
    NULL,            // Task handle
    1                // Core 1
  );
}

void loop() {
  // Daftarkan main loop ke WDT
  static bool wdt_registered = false;
  if(!wdt_registered) {
    if(esp_task_wdt_add(NULL) == ESP_OK) {
      wdt_registered = true;
    }
  }
  // Handle MQTT with mutex
  if(xSemaphoreTake(mqttMutex, portMAX_DELAY) == pdTRUE) {
    esp_task_wdt_reset();  // Reset WDT sebelum operasi MQTT
    mqttClient.loop();
    xSemaphoreGive(mqttMutex);
  }
  
  esp_task_wdt_reset();  // Reset WDT tambahan
  vTaskDelay(1); // Allow lower priority tasks to run
}